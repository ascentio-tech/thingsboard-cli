# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DeviceapicontrollerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_device_attributes_using_get(self, device_token, **kwargs):
        """
        getDeviceAttributes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_attributes_using_get(device_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param str client_keys: clientKeys
        :param str shared_keys: sharedKeys
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_device_attributes_using_get_with_http_info(device_token, **kwargs)
        else:
            (data) = self.get_device_attributes_using_get_with_http_info(device_token, **kwargs)
            return data

    def get_device_attributes_using_get_with_http_info(self, device_token, **kwargs):
        """
        getDeviceAttributes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_attributes_using_get_with_http_info(device_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param str client_keys: clientKeys
        :param str shared_keys: sharedKeys
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'client_keys', 'shared_keys']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_attributes_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `get_device_attributes_using_get`")

        resource_path = '/api/v1/{deviceToken}/attributes'.replace('{format}', 'json')
        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = {}
        if 'client_keys' in params:
            query_params['clientKeys'] = params['client_keys']
        if 'shared_keys' in params:
            query_params['sharedKeys'] = params['shared_keys']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeferredResultResponseEntity',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_device_attributes_using_post(self, device_token, json, **kwargs):
        """
        postDeviceAttributes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_device_attributes_using_post(device_token, json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_device_attributes_using_post_with_http_info(device_token, json, **kwargs)
        else:
            (data) = self.post_device_attributes_using_post_with_http_info(device_token, json, **kwargs)
            return data

    def post_device_attributes_using_post_with_http_info(self, device_token, json, **kwargs):
        """
        postDeviceAttributes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_device_attributes_using_post_with_http_info(device_token, json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'json']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_device_attributes_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `post_device_attributes_using_post`")
        # verify the required parameter 'json' is set
        if ('json' not in params) or (params['json'] is None):
            raise ValueError("Missing the required parameter `json` when calling `post_device_attributes_using_post`")

        resource_path = '/api/v1/{deviceToken}/attributes'.replace('{format}', 'json')
        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeferredResultResponseEntity',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_rpc_request_using_post(self, device_token, json, **kwargs):
        """
        postRpcRequest
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_rpc_request_using_post(device_token, json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_rpc_request_using_post_with_http_info(device_token, json, **kwargs)
        else:
            (data) = self.post_rpc_request_using_post_with_http_info(device_token, json, **kwargs)
            return data

    def post_rpc_request_using_post_with_http_info(self, device_token, json, **kwargs):
        """
        postRpcRequest
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_rpc_request_using_post_with_http_info(device_token, json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'json']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_rpc_request_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `post_rpc_request_using_post`")
        # verify the required parameter 'json' is set
        if ('json' not in params) or (params['json'] is None):
            raise ValueError("Missing the required parameter `json` when calling `post_rpc_request_using_post`")

        resource_path = '/api/v1/{deviceToken}/rpc'.replace('{format}', 'json')
        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeferredResultResponseEntity',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_telemetry_using_post(self, device_token, json, **kwargs):
        """
        postTelemetry
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_telemetry_using_post(device_token, json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_telemetry_using_post_with_http_info(device_token, json, **kwargs)
        else:
            (data) = self.post_telemetry_using_post_with_http_info(device_token, json, **kwargs)
            return data

    def post_telemetry_using_post_with_http_info(self, device_token, json, **kwargs):
        """
        postTelemetry
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_telemetry_using_post_with_http_info(device_token, json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'json']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_telemetry_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `post_telemetry_using_post`")
        # verify the required parameter 'json' is set
        if ('json' not in params) or (params['json'] is None):
            raise ValueError("Missing the required parameter `json` when calling `post_telemetry_using_post`")

        resource_path = '/api/v1/{deviceToken}/telemetry'.replace('{format}', 'json')
        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeferredResultResponseEntity',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def reply_to_command_using_post(self, device_token, request_id, json, **kwargs):
        """
        replyToCommand
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reply_to_command_using_post(device_token, request_id, json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param int request_id: requestId (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reply_to_command_using_post_with_http_info(device_token, request_id, json, **kwargs)
        else:
            (data) = self.reply_to_command_using_post_with_http_info(device_token, request_id, json, **kwargs)
            return data

    def reply_to_command_using_post_with_http_info(self, device_token, request_id, json, **kwargs):
        """
        replyToCommand
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reply_to_command_using_post_with_http_info(device_token, request_id, json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param int request_id: requestId (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'request_id', 'json']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reply_to_command_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `reply_to_command_using_post`")
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `reply_to_command_using_post`")
        # verify the required parameter 'json' is set
        if ('json' not in params) or (params['json'] is None):
            raise ValueError("Missing the required parameter `json` when calling `reply_to_command_using_post`")

        resource_path = '/api/v1/{deviceToken}/rpc/{requestId}'.replace('{format}', 'json')
        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeferredResultResponseEntity',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def subscribe_to_attributes_using_get(self, device_token, **kwargs):
        """
        subscribeToAttributes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_to_attributes_using_get(device_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param int timeout: timeout
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_to_attributes_using_get_with_http_info(device_token, **kwargs)
        else:
            (data) = self.subscribe_to_attributes_using_get_with_http_info(device_token, **kwargs)
            return data

    def subscribe_to_attributes_using_get_with_http_info(self, device_token, **kwargs):
        """
        subscribeToAttributes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_to_attributes_using_get_with_http_info(device_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param int timeout: timeout
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'timeout']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_to_attributes_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `subscribe_to_attributes_using_get`")

        resource_path = '/api/v1/{deviceToken}/attributes/updates'.replace('{format}', 'json')
        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = {}
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeferredResultResponseEntity',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def subscribe_to_commands_using_get(self, device_token, **kwargs):
        """
        subscribeToCommands
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_to_commands_using_get(device_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param int timeout: timeout
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_to_commands_using_get_with_http_info(device_token, **kwargs)
        else:
            (data) = self.subscribe_to_commands_using_get_with_http_info(device_token, **kwargs)
            return data

    def subscribe_to_commands_using_get_with_http_info(self, device_token, **kwargs):
        """
        subscribeToCommands
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_to_commands_using_get_with_http_info(device_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_token: deviceToken (required)
        :param int timeout: timeout
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'timeout']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_to_commands_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `subscribe_to_commands_using_get`")

        resource_path = '/api/v1/{deviceToken}/rpc'.replace('{format}', 'json')
        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = {}
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeferredResultResponseEntity',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
