# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RelationsSearchParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, root_id=None, root_type=None, direction=None, relation_type_group=None, max_level=None):
        """
        RelationsSearchParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'root_id': 'str',
            'root_type': 'str',
            'direction': 'str',
            'relation_type_group': 'str',
            'max_level': 'int'
        }

        self.attribute_map = {
            'root_id': 'rootId',
            'root_type': 'rootType',
            'direction': 'direction',
            'relation_type_group': 'relationTypeGroup',
            'max_level': 'maxLevel'
        }

        self._root_id = root_id
        self._root_type = root_type
        self._direction = direction
        self._relation_type_group = relation_type_group
        self._max_level = max_level

    @property
    def root_id(self):
        """
        Gets the root_id of this RelationsSearchParameters.


        :return: The root_id of this RelationsSearchParameters.
        :rtype: str
        """
        return self._root_id

    @root_id.setter
    def root_id(self, root_id):
        """
        Sets the root_id of this RelationsSearchParameters.


        :param root_id: The root_id of this RelationsSearchParameters.
        :type: str
        """

        self._root_id = root_id

    @property
    def root_type(self):
        """
        Gets the root_type of this RelationsSearchParameters.


        :return: The root_type of this RelationsSearchParameters.
        :rtype: str
        """
        return self._root_type

    @root_type.setter
    def root_type(self, root_type):
        """
        Sets the root_type of this RelationsSearchParameters.


        :param root_type: The root_type of this RelationsSearchParameters.
        :type: str
        """
        allowed_values = ["TENANT", "CUSTOMER", "USER", "DASHBOARD", "ASSET", "DEVICE", "ALARM", "RULE_CHAIN", "RULE_NODE"]
        if root_type not in allowed_values:
            raise ValueError(
                "Invalid value for `root_type` ({0}), must be one of {1}"
                .format(root_type, allowed_values)
            )

        self._root_type = root_type

    @property
    def direction(self):
        """
        Gets the direction of this RelationsSearchParameters.


        :return: The direction of this RelationsSearchParameters.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this RelationsSearchParameters.


        :param direction: The direction of this RelationsSearchParameters.
        :type: str
        """
        allowed_values = ["FROM", "TO"]
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def relation_type_group(self):
        """
        Gets the relation_type_group of this RelationsSearchParameters.


        :return: The relation_type_group of this RelationsSearchParameters.
        :rtype: str
        """
        return self._relation_type_group

    @relation_type_group.setter
    def relation_type_group(self, relation_type_group):
        """
        Sets the relation_type_group of this RelationsSearchParameters.


        :param relation_type_group: The relation_type_group of this RelationsSearchParameters.
        :type: str
        """
        allowed_values = ["COMMON", "ALARM", "DASHBOARD", "RULE_CHAIN", "RULE_NODE"]
        if relation_type_group not in allowed_values:
            raise ValueError(
                "Invalid value for `relation_type_group` ({0}), must be one of {1}"
                .format(relation_type_group, allowed_values)
            )

        self._relation_type_group = relation_type_group

    @property
    def max_level(self):
        """
        Gets the max_level of this RelationsSearchParameters.


        :return: The max_level of this RelationsSearchParameters.
        :rtype: int
        """
        return self._max_level

    @max_level.setter
    def max_level(self, max_level):
        """
        Sets the max_level of this RelationsSearchParameters.


        :param max_level: The max_level of this RelationsSearchParameters.
        :type: int
        """

        self._max_level = max_level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
