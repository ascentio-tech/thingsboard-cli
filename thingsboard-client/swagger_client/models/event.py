# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Event(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, body=None, created_time=None, entity_id=None, id=None, tenant_id=None, type=None, uid=None):
        """
        Event - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'body': 'str',
            'created_time': 'int',
            'entity_id': 'EntityId',
            'id': 'EventId',
            'tenant_id': 'TenantId',
            'type': 'str',
            'uid': 'str'
        }

        self.attribute_map = {
            'body': 'body',
            'created_time': 'createdTime',
            'entity_id': 'entityId',
            'id': 'id',
            'tenant_id': 'tenantId',
            'type': 'type',
            'uid': 'uid'
        }

        self._body = body
        self._created_time = created_time
        self._entity_id = entity_id
        self._id = id
        self._tenant_id = tenant_id
        self._type = type
        self._uid = uid

    @property
    def body(self):
        """
        Gets the body of this Event.


        :return: The body of this Event.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this Event.


        :param body: The body of this Event.
        :type: str
        """

        self._body = body

    @property
    def created_time(self):
        """
        Gets the created_time of this Event.


        :return: The created_time of this Event.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this Event.


        :param created_time: The created_time of this Event.
        :type: int
        """

        self._created_time = created_time

    @property
    def entity_id(self):
        """
        Gets the entity_id of this Event.


        :return: The entity_id of this Event.
        :rtype: EntityId
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this Event.


        :param entity_id: The entity_id of this Event.
        :type: EntityId
        """

        self._entity_id = entity_id

    @property
    def id(self):
        """
        Gets the id of this Event.


        :return: The id of this Event.
        :rtype: EventId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Event.


        :param id: The id of this Event.
        :type: EventId
        """

        self._id = id

    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this Event.


        :return: The tenant_id of this Event.
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this Event.


        :param tenant_id: The tenant_id of this Event.
        :type: TenantId
        """

        self._tenant_id = tenant_id

    @property
    def type(self):
        """
        Gets the type of this Event.


        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Event.


        :param type: The type of this Event.
        :type: str
        """

        self._type = type

    @property
    def uid(self):
        """
        Gets the uid of this Event.


        :return: The uid of this Event.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this Event.


        :param uid: The uid of this Event.
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
