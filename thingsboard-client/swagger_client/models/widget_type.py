# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WidgetType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alias=None, bundle_alias=None, created_time=None, descriptor=None, id=None, name=None, tenant_id=None):
        """
        WidgetType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alias': 'str',
            'bundle_alias': 'str',
            'created_time': 'int',
            'descriptor': 'str',
            'id': 'WidgetTypeId',
            'name': 'str',
            'tenant_id': 'TenantId'
        }

        self.attribute_map = {
            'alias': 'alias',
            'bundle_alias': 'bundleAlias',
            'created_time': 'createdTime',
            'descriptor': 'descriptor',
            'id': 'id',
            'name': 'name',
            'tenant_id': 'tenantId'
        }

        self._alias = alias
        self._bundle_alias = bundle_alias
        self._created_time = created_time
        self._descriptor = descriptor
        self._id = id
        self._name = name
        self._tenant_id = tenant_id

    @property
    def alias(self):
        """
        Gets the alias of this WidgetType.


        :return: The alias of this WidgetType.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this WidgetType.


        :param alias: The alias of this WidgetType.
        :type: str
        """

        self._alias = alias

    @property
    def bundle_alias(self):
        """
        Gets the bundle_alias of this WidgetType.


        :return: The bundle_alias of this WidgetType.
        :rtype: str
        """
        return self._bundle_alias

    @bundle_alias.setter
    def bundle_alias(self, bundle_alias):
        """
        Sets the bundle_alias of this WidgetType.


        :param bundle_alias: The bundle_alias of this WidgetType.
        :type: str
        """

        self._bundle_alias = bundle_alias

    @property
    def created_time(self):
        """
        Gets the created_time of this WidgetType.


        :return: The created_time of this WidgetType.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this WidgetType.


        :param created_time: The created_time of this WidgetType.
        :type: int
        """

        self._created_time = created_time

    @property
    def descriptor(self):
        """
        Gets the descriptor of this WidgetType.


        :return: The descriptor of this WidgetType.
        :rtype: str
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """
        Sets the descriptor of this WidgetType.


        :param descriptor: The descriptor of this WidgetType.
        :type: str
        """

        self._descriptor = descriptor

    @property
    def id(self):
        """
        Gets the id of this WidgetType.


        :return: The id of this WidgetType.
        :rtype: WidgetTypeId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WidgetType.


        :param id: The id of this WidgetType.
        :type: WidgetTypeId
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this WidgetType.


        :return: The name of this WidgetType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WidgetType.


        :param name: The name of this WidgetType.
        :type: str
        """

        self._name = name

    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this WidgetType.


        :return: The tenant_id of this WidgetType.
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this WidgetType.


        :param tenant_id: The tenant_id of this WidgetType.
        :type: TenantId
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
