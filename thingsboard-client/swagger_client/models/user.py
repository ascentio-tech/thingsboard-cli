# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, additional_info=None, authority=None, created_time=None, customer_id=None, email=None, first_name=None, id=None, last_name=None, name=None, tenant_id=None):
        """
        User - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'additional_info': 'str',
            'authority': 'str',
            'created_time': 'int',
            'customer_id': 'CustomerId',
            'email': 'str',
            'first_name': 'str',
            'id': 'UserId',
            'last_name': 'str',
            'name': 'str',
            'tenant_id': 'TenantId'
        }

        self.attribute_map = {
            'additional_info': 'additionalInfo',
            'authority': 'authority',
            'created_time': 'createdTime',
            'customer_id': 'customerId',
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'name': 'name',
            'tenant_id': 'tenantId'
        }

        self._additional_info = additional_info
        self._authority = authority
        self._created_time = created_time
        self._customer_id = customer_id
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._name = name
        self._tenant_id = tenant_id

    @property
    def additional_info(self):
        """
        Gets the additional_info of this User.


        :return: The additional_info of this User.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """
        Sets the additional_info of this User.


        :param additional_info: The additional_info of this User.
        :type: str
        """

        self._additional_info = additional_info

    @property
    def authority(self):
        """
        Gets the authority of this User.


        :return: The authority of this User.
        :rtype: str
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """
        Sets the authority of this User.


        :param authority: The authority of this User.
        :type: str
        """
        allowed_values = ["SYS_ADMIN", "TENANT_ADMIN", "CUSTOMER_USER", "REFRESH_TOKEN"]
        if authority not in allowed_values:
            raise ValueError(
                "Invalid value for `authority` ({0}), must be one of {1}"
                .format(authority, allowed_values)
            )

        self._authority = authority

    @property
    def created_time(self):
        """
        Gets the created_time of this User.


        :return: The created_time of this User.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this User.


        :param created_time: The created_time of this User.
        :type: int
        """

        self._created_time = created_time

    @property
    def customer_id(self):
        """
        Gets the customer_id of this User.


        :return: The customer_id of this User.
        :rtype: CustomerId
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this User.


        :param customer_id: The customer_id of this User.
        :type: CustomerId
        """

        self._customer_id = customer_id

    @property
    def email(self):
        """
        Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this User.


        :param email: The email of this User.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """
        Gets the id of this User.


        :return: The id of this User.
        :rtype: UserId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this User.


        :param id: The id of this User.
        :type: UserId
        """

        self._id = id

    @property
    def last_name(self):
        """
        Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """
        Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this User.


        :param name: The name of this User.
        :type: str
        """

        self._name = name

    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this User.


        :return: The tenant_id of this User.
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this User.


        :param tenant_id: The tenant_id of this User.
        :type: TenantId
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
