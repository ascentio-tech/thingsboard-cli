# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DeviceCredentials(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_time=None, credentials_id=None, credentials_type=None, credentials_value=None, device_id=None, id=None):
        """
        DeviceCredentials - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_time': 'int',
            'credentials_id': 'str',
            'credentials_type': 'str',
            'credentials_value': 'str',
            'device_id': 'DeviceId',
            'id': 'DeviceCredentialsId'
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'credentials_id': 'credentialsId',
            'credentials_type': 'credentialsType',
            'credentials_value': 'credentialsValue',
            'device_id': 'deviceId',
            'id': 'id'
        }

        self._created_time = created_time
        self._credentials_id = credentials_id
        self._credentials_type = credentials_type
        self._credentials_value = credentials_value
        self._device_id = device_id
        self._id = id

    @property
    def created_time(self):
        """
        Gets the created_time of this DeviceCredentials.


        :return: The created_time of this DeviceCredentials.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this DeviceCredentials.


        :param created_time: The created_time of this DeviceCredentials.
        :type: int
        """

        self._created_time = created_time

    @property
    def credentials_id(self):
        """
        Gets the credentials_id of this DeviceCredentials.


        :return: The credentials_id of this DeviceCredentials.
        :rtype: str
        """
        return self._credentials_id

    @credentials_id.setter
    def credentials_id(self, credentials_id):
        """
        Sets the credentials_id of this DeviceCredentials.


        :param credentials_id: The credentials_id of this DeviceCredentials.
        :type: str
        """

        self._credentials_id = credentials_id

    @property
    def credentials_type(self):
        """
        Gets the credentials_type of this DeviceCredentials.


        :return: The credentials_type of this DeviceCredentials.
        :rtype: str
        """
        return self._credentials_type

    @credentials_type.setter
    def credentials_type(self, credentials_type):
        """
        Sets the credentials_type of this DeviceCredentials.


        :param credentials_type: The credentials_type of this DeviceCredentials.
        :type: str
        """
        allowed_values = ["ACCESS_TOKEN", "X509_CERTIFICATE"]
        if credentials_type not in allowed_values:
            raise ValueError(
                "Invalid value for `credentials_type` ({0}), must be one of {1}"
                .format(credentials_type, allowed_values)
            )

        self._credentials_type = credentials_type

    @property
    def credentials_value(self):
        """
        Gets the credentials_value of this DeviceCredentials.


        :return: The credentials_value of this DeviceCredentials.
        :rtype: str
        """
        return self._credentials_value

    @credentials_value.setter
    def credentials_value(self, credentials_value):
        """
        Sets the credentials_value of this DeviceCredentials.


        :param credentials_value: The credentials_value of this DeviceCredentials.
        :type: str
        """

        self._credentials_value = credentials_value

    @property
    def device_id(self):
        """
        Gets the device_id of this DeviceCredentials.


        :return: The device_id of this DeviceCredentials.
        :rtype: DeviceId
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this DeviceCredentials.


        :param device_id: The device_id of this DeviceCredentials.
        :type: DeviceId
        """

        self._device_id = device_id

    @property
    def id(self):
        """
        Gets the id of this DeviceCredentials.


        :return: The id of this DeviceCredentials.
        :rtype: DeviceCredentialsId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeviceCredentials.


        :param id: The id of this DeviceCredentials.
        :type: DeviceCredentialsId
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
