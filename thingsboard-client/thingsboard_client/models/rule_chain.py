# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RuleChain(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, additional_info=None, configuration=None, created_time=None, debug_mode=None, first_rule_node_id=None, id=None, name=None, root=None, tenant_id=None):
        """
        RuleChain - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'additional_info': 'str',
            'configuration': 'str',
            'created_time': 'int',
            'debug_mode': 'bool',
            'first_rule_node_id': 'RuleNodeId',
            'id': 'RuleChainId',
            'name': 'str',
            'root': 'bool',
            'tenant_id': 'TenantId'
        }

        self.attribute_map = {
            'additional_info': 'additionalInfo',
            'configuration': 'configuration',
            'created_time': 'createdTime',
            'debug_mode': 'debugMode',
            'first_rule_node_id': 'firstRuleNodeId',
            'id': 'id',
            'name': 'name',
            'root': 'root',
            'tenant_id': 'tenantId'
        }

        self._additional_info = additional_info
        self._configuration = configuration
        self._created_time = created_time
        self._debug_mode = debug_mode
        self._first_rule_node_id = first_rule_node_id
        self._id = id
        self._name = name
        self._root = root
        self._tenant_id = tenant_id

    @property
    def additional_info(self):
        """
        Gets the additional_info of this RuleChain.


        :return: The additional_info of this RuleChain.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """
        Sets the additional_info of this RuleChain.


        :param additional_info: The additional_info of this RuleChain.
        :type: str
        """

        self._additional_info = additional_info

    @property
    def configuration(self):
        """
        Gets the configuration of this RuleChain.


        :return: The configuration of this RuleChain.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this RuleChain.


        :param configuration: The configuration of this RuleChain.
        :type: str
        """

        self._configuration = configuration

    @property
    def created_time(self):
        """
        Gets the created_time of this RuleChain.


        :return: The created_time of this RuleChain.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this RuleChain.


        :param created_time: The created_time of this RuleChain.
        :type: int
        """

        self._created_time = created_time

    @property
    def debug_mode(self):
        """
        Gets the debug_mode of this RuleChain.


        :return: The debug_mode of this RuleChain.
        :rtype: bool
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """
        Sets the debug_mode of this RuleChain.


        :param debug_mode: The debug_mode of this RuleChain.
        :type: bool
        """

        self._debug_mode = debug_mode

    @property
    def first_rule_node_id(self):
        """
        Gets the first_rule_node_id of this RuleChain.


        :return: The first_rule_node_id of this RuleChain.
        :rtype: RuleNodeId
        """
        return self._first_rule_node_id

    @first_rule_node_id.setter
    def first_rule_node_id(self, first_rule_node_id):
        """
        Sets the first_rule_node_id of this RuleChain.


        :param first_rule_node_id: The first_rule_node_id of this RuleChain.
        :type: RuleNodeId
        """

        self._first_rule_node_id = first_rule_node_id

    @property
    def id(self):
        """
        Gets the id of this RuleChain.


        :return: The id of this RuleChain.
        :rtype: RuleChainId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RuleChain.


        :param id: The id of this RuleChain.
        :type: RuleChainId
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this RuleChain.


        :return: The name of this RuleChain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RuleChain.


        :param name: The name of this RuleChain.
        :type: str
        """

        self._name = name

    @property
    def root(self):
        """
        Gets the root of this RuleChain.


        :return: The root of this RuleChain.
        :rtype: bool
        """
        return self._root

    @root.setter
    def root(self, root):
        """
        Sets the root of this RuleChain.


        :param root: The root of this RuleChain.
        :type: bool
        """

        self._root = root

    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this RuleChain.


        :return: The tenant_id of this RuleChain.
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this RuleChain.


        :param tenant_id: The tenant_id of this RuleChain.
        :type: TenantId
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
