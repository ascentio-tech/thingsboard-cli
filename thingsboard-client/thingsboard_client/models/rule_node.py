# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RuleNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, additional_info=None, configuration=None, created_time=None, debug_mode=None, id=None, name=None, rule_chain_id=None, type=None):
        """
        RuleNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'additional_info': 'str',
            'configuration': 'str',
            'created_time': 'int',
            'debug_mode': 'bool',
            'id': 'RuleNodeId',
            'name': 'str',
            'rule_chain_id': 'RuleChainId',
            'type': 'str'
        }

        self.attribute_map = {
            'additional_info': 'additionalInfo',
            'configuration': 'configuration',
            'created_time': 'createdTime',
            'debug_mode': 'debugMode',
            'id': 'id',
            'name': 'name',
            'rule_chain_id': 'ruleChainId',
            'type': 'type'
        }

        self._additional_info = additional_info
        self._configuration = configuration
        self._created_time = created_time
        self._debug_mode = debug_mode
        self._id = id
        self._name = name
        self._rule_chain_id = rule_chain_id
        self._type = type

    @property
    def additional_info(self):
        """
        Gets the additional_info of this RuleNode.


        :return: The additional_info of this RuleNode.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """
        Sets the additional_info of this RuleNode.


        :param additional_info: The additional_info of this RuleNode.
        :type: str
        """

        self._additional_info = additional_info

    @property
    def configuration(self):
        """
        Gets the configuration of this RuleNode.


        :return: The configuration of this RuleNode.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this RuleNode.


        :param configuration: The configuration of this RuleNode.
        :type: str
        """

        self._configuration = configuration

    @property
    def created_time(self):
        """
        Gets the created_time of this RuleNode.


        :return: The created_time of this RuleNode.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this RuleNode.


        :param created_time: The created_time of this RuleNode.
        :type: int
        """

        self._created_time = created_time

    @property
    def debug_mode(self):
        """
        Gets the debug_mode of this RuleNode.


        :return: The debug_mode of this RuleNode.
        :rtype: bool
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """
        Sets the debug_mode of this RuleNode.


        :param debug_mode: The debug_mode of this RuleNode.
        :type: bool
        """

        self._debug_mode = debug_mode

    @property
    def id(self):
        """
        Gets the id of this RuleNode.


        :return: The id of this RuleNode.
        :rtype: RuleNodeId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RuleNode.


        :param id: The id of this RuleNode.
        :type: RuleNodeId
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this RuleNode.


        :return: The name of this RuleNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RuleNode.


        :param name: The name of this RuleNode.
        :type: str
        """

        self._name = name

    @property
    def rule_chain_id(self):
        """
        Gets the rule_chain_id of this RuleNode.


        :return: The rule_chain_id of this RuleNode.
        :rtype: RuleChainId
        """
        return self._rule_chain_id

    @rule_chain_id.setter
    def rule_chain_id(self, rule_chain_id):
        """
        Sets the rule_chain_id of this RuleNode.


        :param rule_chain_id: The rule_chain_id of this RuleNode.
        :type: RuleChainId
        """

        self._rule_chain_id = rule_chain_id

    @property
    def type(self):
        """
        Gets the type of this RuleNode.


        :return: The type of this RuleNode.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RuleNode.


        :param type: The type of this RuleNode.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
