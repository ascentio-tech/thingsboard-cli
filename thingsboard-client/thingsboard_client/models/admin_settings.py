# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AdminSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_time=None, id=None, json_value=None, key=None):
        """
        AdminSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_time': 'int',
            'id': 'AdminSettingsId',
            'json_value': 'str',
            'key': 'str'
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'id': 'id',
            'json_value': 'jsonValue',
            'key': 'key'
        }

        self._created_time = created_time
        self._id = id
        self._json_value = json_value
        self._key = key

    @property
    def created_time(self):
        """
        Gets the created_time of this AdminSettings.


        :return: The created_time of this AdminSettings.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this AdminSettings.


        :param created_time: The created_time of this AdminSettings.
        :type: int
        """

        self._created_time = created_time

    @property
    def id(self):
        """
        Gets the id of this AdminSettings.


        :return: The id of this AdminSettings.
        :rtype: AdminSettingsId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AdminSettings.


        :param id: The id of this AdminSettings.
        :type: AdminSettingsId
        """

        self._id = id

    @property
    def json_value(self):
        """
        Gets the json_value of this AdminSettings.


        :return: The json_value of this AdminSettings.
        :rtype: str
        """
        return self._json_value

    @json_value.setter
    def json_value(self, json_value):
        """
        Sets the json_value of this AdminSettings.


        :param json_value: The json_value of this AdminSettings.
        :type: str
        """

        self._json_value = json_value

    @property
    def key(self):
        """
        Gets the key of this AdminSettings.


        :return: The key of this AdminSettings.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this AdminSettings.


        :param key: The key of this AdminSettings.
        :type: str
        """

        self._key = key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
