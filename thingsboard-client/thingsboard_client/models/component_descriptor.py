# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ComponentDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, actions=None, clazz=None, configuration_descriptor=None, created_time=None, id=None, name=None, scope=None, type=None):
        """
        ComponentDescriptor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'actions': 'str',
            'clazz': 'str',
            'configuration_descriptor': 'str',
            'created_time': 'int',
            'id': 'ComponentDescriptorId',
            'name': 'str',
            'scope': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'actions': 'actions',
            'clazz': 'clazz',
            'configuration_descriptor': 'configurationDescriptor',
            'created_time': 'createdTime',
            'id': 'id',
            'name': 'name',
            'scope': 'scope',
            'type': 'type'
        }

        self._actions = actions
        self._clazz = clazz
        self._configuration_descriptor = configuration_descriptor
        self._created_time = created_time
        self._id = id
        self._name = name
        self._scope = scope
        self._type = type

    @property
    def actions(self):
        """
        Gets the actions of this ComponentDescriptor.


        :return: The actions of this ComponentDescriptor.
        :rtype: str
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this ComponentDescriptor.


        :param actions: The actions of this ComponentDescriptor.
        :type: str
        """

        self._actions = actions

    @property
    def clazz(self):
        """
        Gets the clazz of this ComponentDescriptor.


        :return: The clazz of this ComponentDescriptor.
        :rtype: str
        """
        return self._clazz

    @clazz.setter
    def clazz(self, clazz):
        """
        Sets the clazz of this ComponentDescriptor.


        :param clazz: The clazz of this ComponentDescriptor.
        :type: str
        """

        self._clazz = clazz

    @property
    def configuration_descriptor(self):
        """
        Gets the configuration_descriptor of this ComponentDescriptor.


        :return: The configuration_descriptor of this ComponentDescriptor.
        :rtype: str
        """
        return self._configuration_descriptor

    @configuration_descriptor.setter
    def configuration_descriptor(self, configuration_descriptor):
        """
        Sets the configuration_descriptor of this ComponentDescriptor.


        :param configuration_descriptor: The configuration_descriptor of this ComponentDescriptor.
        :type: str
        """

        self._configuration_descriptor = configuration_descriptor

    @property
    def created_time(self):
        """
        Gets the created_time of this ComponentDescriptor.


        :return: The created_time of this ComponentDescriptor.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this ComponentDescriptor.


        :param created_time: The created_time of this ComponentDescriptor.
        :type: int
        """

        self._created_time = created_time

    @property
    def id(self):
        """
        Gets the id of this ComponentDescriptor.


        :return: The id of this ComponentDescriptor.
        :rtype: ComponentDescriptorId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ComponentDescriptor.


        :param id: The id of this ComponentDescriptor.
        :type: ComponentDescriptorId
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ComponentDescriptor.


        :return: The name of this ComponentDescriptor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ComponentDescriptor.


        :param name: The name of this ComponentDescriptor.
        :type: str
        """

        self._name = name

    @property
    def scope(self):
        """
        Gets the scope of this ComponentDescriptor.


        :return: The scope of this ComponentDescriptor.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this ComponentDescriptor.


        :param scope: The scope of this ComponentDescriptor.
        :type: str
        """
        allowed_values = ["SYSTEM", "TENANT"]
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def type(self):
        """
        Gets the type of this ComponentDescriptor.


        :return: The type of this ComponentDescriptor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ComponentDescriptor.


        :param type: The type of this ComponentDescriptor.
        :type: str
        """
        allowed_values = ["ENRICHMENT", "FILTER", "TRANSFORMATION", "ACTION", "EXTERNAL"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
