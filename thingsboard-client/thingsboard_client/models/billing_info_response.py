# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BillingInfoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message=None, name=None, quantity_of_meters=None, tenant_id=None):
        """
        BillingInfoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'message': 'str',
            'name': 'str',
            'quantity_of_meters': 'int',
            'tenant_id': 'TenantId'
        }

        self.attribute_map = {
            'message': 'message',
            'name': 'name',
            'quantity_of_meters': 'quantityOfMeters',
            'tenant_id': 'tenantId'
        }

        self._message = message
        self._name = name
        self._quantity_of_meters = quantity_of_meters
        self._tenant_id = tenant_id

    @property
    def message(self):
        """
        Gets the message of this BillingInfoResponse.


        :return: The message of this BillingInfoResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this BillingInfoResponse.


        :param message: The message of this BillingInfoResponse.
        :type: str
        """

        self._message = message

    @property
    def name(self):
        """
        Gets the name of this BillingInfoResponse.


        :return: The name of this BillingInfoResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BillingInfoResponse.


        :param name: The name of this BillingInfoResponse.
        :type: str
        """

        self._name = name

    @property
    def quantity_of_meters(self):
        """
        Gets the quantity_of_meters of this BillingInfoResponse.


        :return: The quantity_of_meters of this BillingInfoResponse.
        :rtype: int
        """
        return self._quantity_of_meters

    @quantity_of_meters.setter
    def quantity_of_meters(self, quantity_of_meters):
        """
        Sets the quantity_of_meters of this BillingInfoResponse.


        :param quantity_of_meters: The quantity_of_meters of this BillingInfoResponse.
        :type: int
        """

        self._quantity_of_meters = quantity_of_meters

    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this BillingInfoResponse.


        :return: The tenant_id of this BillingInfoResponse.
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this BillingInfoResponse.


        :param tenant_id: The tenant_id of this BillingInfoResponse.
        :type: TenantId
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
