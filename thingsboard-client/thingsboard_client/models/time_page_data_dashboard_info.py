# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TimePageDataDashboardInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data=None, has_next=None, next_page_link=None):
        """
        TimePageDataDashboardInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data': 'list[DashboardInfo]',
            'has_next': 'bool',
            'next_page_link': 'TimePageLink'
        }

        self.attribute_map = {
            'data': 'data',
            'has_next': 'hasNext',
            'next_page_link': 'nextPageLink'
        }

        self._data = data
        self._has_next = has_next
        self._next_page_link = next_page_link

    @property
    def data(self):
        """
        Gets the data of this TimePageDataDashboardInfo.


        :return: The data of this TimePageDataDashboardInfo.
        :rtype: list[DashboardInfo]
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this TimePageDataDashboardInfo.


        :param data: The data of this TimePageDataDashboardInfo.
        :type: list[DashboardInfo]
        """

        self._data = data

    @property
    def has_next(self):
        """
        Gets the has_next of this TimePageDataDashboardInfo.


        :return: The has_next of this TimePageDataDashboardInfo.
        :rtype: bool
        """
        return self._has_next

    @has_next.setter
    def has_next(self, has_next):
        """
        Sets the has_next of this TimePageDataDashboardInfo.


        :param has_next: The has_next of this TimePageDataDashboardInfo.
        :type: bool
        """

        self._has_next = has_next

    @property
    def next_page_link(self):
        """
        Gets the next_page_link of this TimePageDataDashboardInfo.


        :return: The next_page_link of this TimePageDataDashboardInfo.
        :rtype: TimePageLink
        """
        return self._next_page_link

    @next_page_link.setter
    def next_page_link(self, next_page_link):
        """
        Sets the next_page_link of this TimePageDataDashboardInfo.


        :param next_page_link: The next_page_link of this TimePageDataDashboardInfo.
        :type: TimePageLink
        """

        self._next_page_link = next_page_link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
