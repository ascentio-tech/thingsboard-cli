# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AlarmcontrollerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def ack_alarm_using_post(self, alarm_id, **kwargs):
        """
        ackAlarm
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ack_alarm_using_post(alarm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alarm_id: alarmId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ack_alarm_using_post_with_http_info(alarm_id, **kwargs)
        else:
            (data) = self.ack_alarm_using_post_with_http_info(alarm_id, **kwargs)
            return data

    def ack_alarm_using_post_with_http_info(self, alarm_id, **kwargs):
        """
        ackAlarm
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ack_alarm_using_post_with_http_info(alarm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alarm_id: alarmId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ack_alarm_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm_id' is set
        if ('alarm_id' not in params) or (params['alarm_id'] is None):
            raise ValueError("Missing the required parameter `alarm_id` when calling `ack_alarm_using_post`")

        resource_path = '/api/alarm/{alarmId}/ack'.replace('{format}', 'json')
        path_params = {}
        if 'alarm_id' in params:
            path_params['alarmId'] = params['alarm_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def clear_alarm_using_post(self, alarm_id, **kwargs):
        """
        clearAlarm
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clear_alarm_using_post(alarm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alarm_id: alarmId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clear_alarm_using_post_with_http_info(alarm_id, **kwargs)
        else:
            (data) = self.clear_alarm_using_post_with_http_info(alarm_id, **kwargs)
            return data

    def clear_alarm_using_post_with_http_info(self, alarm_id, **kwargs):
        """
        clearAlarm
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clear_alarm_using_post_with_http_info(alarm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alarm_id: alarmId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_alarm_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm_id' is set
        if ('alarm_id' not in params) or (params['alarm_id'] is None):
            raise ValueError("Missing the required parameter `alarm_id` when calling `clear_alarm_using_post`")

        resource_path = '/api/alarm/{alarmId}/clear'.replace('{format}', 'json')
        path_params = {}
        if 'alarm_id' in params:
            path_params['alarmId'] = params['alarm_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_alarm_by_id_using_get(self, alarm_id, **kwargs):
        """
        getAlarmById
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alarm_by_id_using_get(alarm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alarm_id: alarmId (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_alarm_by_id_using_get_with_http_info(alarm_id, **kwargs)
        else:
            (data) = self.get_alarm_by_id_using_get_with_http_info(alarm_id, **kwargs)
            return data

    def get_alarm_by_id_using_get_with_http_info(self, alarm_id, **kwargs):
        """
        getAlarmById
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alarm_by_id_using_get_with_http_info(alarm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alarm_id: alarmId (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alarm_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm_id' is set
        if ('alarm_id' not in params) or (params['alarm_id'] is None):
            raise ValueError("Missing the required parameter `alarm_id` when calling `get_alarm_by_id_using_get`")

        resource_path = '/api/alarm/{alarmId}'.replace('{format}', 'json')
        path_params = {}
        if 'alarm_id' in params:
            path_params['alarmId'] = params['alarm_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Alarm',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_alarm_info_by_id_using_get(self, alarm_id, **kwargs):
        """
        getAlarmInfoById
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alarm_info_by_id_using_get(alarm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alarm_id: alarmId (required)
        :return: AlarmInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_alarm_info_by_id_using_get_with_http_info(alarm_id, **kwargs)
        else:
            (data) = self.get_alarm_info_by_id_using_get_with_http_info(alarm_id, **kwargs)
            return data

    def get_alarm_info_by_id_using_get_with_http_info(self, alarm_id, **kwargs):
        """
        getAlarmInfoById
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alarm_info_by_id_using_get_with_http_info(alarm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alarm_id: alarmId (required)
        :return: AlarmInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alarm_info_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm_id' is set
        if ('alarm_id' not in params) or (params['alarm_id'] is None):
            raise ValueError("Missing the required parameter `alarm_id` when calling `get_alarm_info_by_id_using_get`")

        resource_path = '/api/alarm/info/{alarmId}'.replace('{format}', 'json')
        path_params = {}
        if 'alarm_id' in params:
            path_params['alarmId'] = params['alarm_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AlarmInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_alarms_using_get(self, entity_type, entity_id, limit, **kwargs):
        """
        getAlarms
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alarms_using_get(entity_type, entity_id, limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str entity_type: entityType (required)
        :param str entity_id: entityId (required)
        :param int limit: limit (required)
        :param str search_status: searchStatus
        :param str status: status
        :param int start_time: startTime
        :param int end_time: endTime
        :param bool asc_order: ascOrder
        :param str offset: offset
        :param bool fetch_originator: fetchOriginator
        :return: TimePageDataAlarmInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_alarms_using_get_with_http_info(entity_type, entity_id, limit, **kwargs)
        else:
            (data) = self.get_alarms_using_get_with_http_info(entity_type, entity_id, limit, **kwargs)
            return data

    def get_alarms_using_get_with_http_info(self, entity_type, entity_id, limit, **kwargs):
        """
        getAlarms
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alarms_using_get_with_http_info(entity_type, entity_id, limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str entity_type: entityType (required)
        :param str entity_id: entityId (required)
        :param int limit: limit (required)
        :param str search_status: searchStatus
        :param str status: status
        :param int start_time: startTime
        :param int end_time: endTime
        :param bool asc_order: ascOrder
        :param str offset: offset
        :param bool fetch_originator: fetchOriginator
        :return: TimePageDataAlarmInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_type', 'entity_id', 'limit', 'search_status', 'status', 'start_time', 'end_time', 'asc_order', 'offset', 'fetch_originator']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alarms_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params) or (params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `get_alarms_using_get`")
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params) or (params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `get_alarms_using_get`")
        # verify the required parameter 'limit' is set
        if ('limit' not in params) or (params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_alarms_using_get`")

        resource_path = '/api/alarm/{entityType}/{entityId}'.replace('{format}', 'json')
        path_params = {}
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']

        query_params = {}
        if 'search_status' in params:
            query_params['searchStatus'] = params['search_status']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'asc_order' in params:
            query_params['ascOrder'] = params['asc_order']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'fetch_originator' in params:
            query_params['fetchOriginator'] = params['fetch_originator']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TimePageDataAlarmInfo',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_highest_alarm_severity_using_get(self, entity_type, entity_id, **kwargs):
        """
        getHighestAlarmSeverity
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_highest_alarm_severity_using_get(entity_type, entity_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str entity_type: entityType (required)
        :param str entity_id: entityId (required)
        :param str search_status: searchStatus
        :param str status: status
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_highest_alarm_severity_using_get_with_http_info(entity_type, entity_id, **kwargs)
        else:
            (data) = self.get_highest_alarm_severity_using_get_with_http_info(entity_type, entity_id, **kwargs)
            return data

    def get_highest_alarm_severity_using_get_with_http_info(self, entity_type, entity_id, **kwargs):
        """
        getHighestAlarmSeverity
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_highest_alarm_severity_using_get_with_http_info(entity_type, entity_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str entity_type: entityType (required)
        :param str entity_id: entityId (required)
        :param str search_status: searchStatus
        :param str status: status
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_type', 'entity_id', 'search_status', 'status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_highest_alarm_severity_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params) or (params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `get_highest_alarm_severity_using_get`")
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params) or (params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `get_highest_alarm_severity_using_get`")

        resource_path = '/api/alarm/highestSeverity/{entityType}/{entityId}'.replace('{format}', 'json')
        path_params = {}
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']

        query_params = {}
        if 'search_status' in params:
            query_params['searchStatus'] = params['search_status']
        if 'status' in params:
            query_params['status'] = params['status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def save_alarm_using_post(self, alarm, **kwargs):
        """
        saveAlarm
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_alarm_using_post(alarm, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Alarm alarm: alarm (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.save_alarm_using_post_with_http_info(alarm, **kwargs)
        else:
            (data) = self.save_alarm_using_post_with_http_info(alarm, **kwargs)
            return data

    def save_alarm_using_post_with_http_info(self, alarm, **kwargs):
        """
        saveAlarm
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_alarm_using_post_with_http_info(alarm, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Alarm alarm: alarm (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_alarm_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm' is set
        if ('alarm' not in params) or (params['alarm'] is None):
            raise ValueError("Missing the required parameter `alarm` when calling `save_alarm_using_post`")

        resource_path = '/api/alarm'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'alarm' in params:
            body_params = params['alarm']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Alarm',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
