# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EntityrelationcontrollerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_relation_using_delete(self, from_id, from_type, relation_type, to_id, to_type, **kwargs):
        """
        deleteRelation
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_relation_using_delete(from_id, from_type, relation_type, to_id, to_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_id: fromId (required)
        :param str from_type: fromType (required)
        :param str relation_type: relationType (required)
        :param str to_id: toId (required)
        :param str to_type: toType (required)
        :param str relation_type_group: relationTypeGroup
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_relation_using_delete_with_http_info(from_id, from_type, relation_type, to_id, to_type, **kwargs)
        else:
            (data) = self.delete_relation_using_delete_with_http_info(from_id, from_type, relation_type, to_id, to_type, **kwargs)
            return data

    def delete_relation_using_delete_with_http_info(self, from_id, from_type, relation_type, to_id, to_type, **kwargs):
        """
        deleteRelation
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_relation_using_delete_with_http_info(from_id, from_type, relation_type, to_id, to_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_id: fromId (required)
        :param str from_type: fromType (required)
        :param str relation_type: relationType (required)
        :param str to_id: toId (required)
        :param str to_type: toType (required)
        :param str relation_type_group: relationTypeGroup
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_id', 'from_type', 'relation_type', 'to_id', 'to_type', 'relation_type_group']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_relation_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_id' is set
        if ('from_id' not in params) or (params['from_id'] is None):
            raise ValueError("Missing the required parameter `from_id` when calling `delete_relation_using_delete`")
        # verify the required parameter 'from_type' is set
        if ('from_type' not in params) or (params['from_type'] is None):
            raise ValueError("Missing the required parameter `from_type` when calling `delete_relation_using_delete`")
        # verify the required parameter 'relation_type' is set
        if ('relation_type' not in params) or (params['relation_type'] is None):
            raise ValueError("Missing the required parameter `relation_type` when calling `delete_relation_using_delete`")
        # verify the required parameter 'to_id' is set
        if ('to_id' not in params) or (params['to_id'] is None):
            raise ValueError("Missing the required parameter `to_id` when calling `delete_relation_using_delete`")
        # verify the required parameter 'to_type' is set
        if ('to_type' not in params) or (params['to_type'] is None):
            raise ValueError("Missing the required parameter `to_type` when calling `delete_relation_using_delete`")

        resource_path = '/api/relation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'relation_type_group' in params:
            query_params['relationTypeGroup'] = params['relation_type_group']
        if 'from_id' in params:
            query_params['fromId'] = params['from_id']
        if 'from_type' in params:
            query_params['fromType'] = params['from_type']
        if 'relation_type' in params:
            query_params['relationType'] = params['relation_type']
        if 'to_id' in params:
            query_params['toId'] = params['to_id']
        if 'to_type' in params:
            query_params['toType'] = params['to_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_relations_using_delete(self, entity_id, entity_type, id, type, **kwargs):
        """
        deleteRelations
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_relations_using_delete(entity_id, entity_type, id, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str entity_id: entityId (required)
        :param str entity_type: entityType (required)
        :param str id:  (required)
        :param str type:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_relations_using_delete_with_http_info(entity_id, entity_type, id, type, **kwargs)
        else:
            (data) = self.delete_relations_using_delete_with_http_info(entity_id, entity_type, id, type, **kwargs)
            return data

    def delete_relations_using_delete_with_http_info(self, entity_id, entity_type, id, type, **kwargs):
        """
        deleteRelations
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_relations_using_delete_with_http_info(entity_id, entity_type, id, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str entity_id: entityId (required)
        :param str entity_type: entityType (required)
        :param str id:  (required)
        :param str type:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'entity_type', 'id', 'type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_relations_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params) or (params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `delete_relations_using_delete`")
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params) or (params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `delete_relations_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_relations_using_delete`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_relations_using_delete`")

        resource_path = '/api/relations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'entity_id' in params:
            query_params['entityId'] = params['entity_id']
        if 'entity_type' in params:
            query_params['entityType'] = params['entity_type']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_by_from_using_get(self, from_id, from_type, **kwargs):
        """
        findByFrom
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_by_from_using_get(from_id, from_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_id: fromId (required)
        :param str from_type: fromType (required)
        :param str relation_type_group: relationTypeGroup
        :return: list[EntityRelation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_by_from_using_get_with_http_info(from_id, from_type, **kwargs)
        else:
            (data) = self.find_by_from_using_get_with_http_info(from_id, from_type, **kwargs)
            return data

    def find_by_from_using_get_with_http_info(self, from_id, from_type, **kwargs):
        """
        findByFrom
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_by_from_using_get_with_http_info(from_id, from_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_id: fromId (required)
        :param str from_type: fromType (required)
        :param str relation_type_group: relationTypeGroup
        :return: list[EntityRelation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_id', 'from_type', 'relation_type_group']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_by_from_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_id' is set
        if ('from_id' not in params) or (params['from_id'] is None):
            raise ValueError("Missing the required parameter `from_id` when calling `find_by_from_using_get`")
        # verify the required parameter 'from_type' is set
        if ('from_type' not in params) or (params['from_type'] is None):
            raise ValueError("Missing the required parameter `from_type` when calling `find_by_from_using_get`")

        resource_path = '/api/relations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'relation_type_group' in params:
            query_params['relationTypeGroup'] = params['relation_type_group']
        if 'from_id' in params:
            query_params['fromId'] = params['from_id']
        if 'from_type' in params:
            query_params['fromType'] = params['from_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[EntityRelation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_by_query_using_post2(self, query, **kwargs):
        """
        findByQuery
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_by_query_using_post2(query, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EntityRelationsQuery query: query (required)
        :return: list[EntityRelation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_by_query_using_post2_with_http_info(query, **kwargs)
        else:
            (data) = self.find_by_query_using_post2_with_http_info(query, **kwargs)
            return data

    def find_by_query_using_post2_with_http_info(self, query, **kwargs):
        """
        findByQuery
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_by_query_using_post2_with_http_info(query, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EntityRelationsQuery query: query (required)
        :return: list[EntityRelation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_by_query_using_post2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params) or (params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `find_by_query_using_post2`")

        resource_path = '/api/relations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in params:
            body_params = params['query']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[EntityRelation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_info_by_query_using_post(self, query, **kwargs):
        """
        findInfoByQuery
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_info_by_query_using_post(query, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EntityRelationsQuery query: query (required)
        :return: list[EntityRelationInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_info_by_query_using_post_with_http_info(query, **kwargs)
        else:
            (data) = self.find_info_by_query_using_post_with_http_info(query, **kwargs)
            return data

    def find_info_by_query_using_post_with_http_info(self, query, **kwargs):
        """
        findInfoByQuery
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_info_by_query_using_post_with_http_info(query, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EntityRelationsQuery query: query (required)
        :return: list[EntityRelationInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_info_by_query_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params) or (params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `find_info_by_query_using_post`")

        resource_path = '/api/relations/info'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in params:
            body_params = params['query']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[EntityRelationInfo]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_info_by_to_using_get(self, to_id, to_type, **kwargs):
        """
        findInfoByTo
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_info_by_to_using_get(to_id, to_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str to_id: toId (required)
        :param str to_type: toType (required)
        :param str relation_type_group: relationTypeGroup
        :return: list[EntityRelationInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_info_by_to_using_get_with_http_info(to_id, to_type, **kwargs)
        else:
            (data) = self.find_info_by_to_using_get_with_http_info(to_id, to_type, **kwargs)
            return data

    def find_info_by_to_using_get_with_http_info(self, to_id, to_type, **kwargs):
        """
        findInfoByTo
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_info_by_to_using_get_with_http_info(to_id, to_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str to_id: toId (required)
        :param str to_type: toType (required)
        :param str relation_type_group: relationTypeGroup
        :return: list[EntityRelationInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to_id', 'to_type', 'relation_type_group']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_info_by_to_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to_id' is set
        if ('to_id' not in params) or (params['to_id'] is None):
            raise ValueError("Missing the required parameter `to_id` when calling `find_info_by_to_using_get`")
        # verify the required parameter 'to_type' is set
        if ('to_type' not in params) or (params['to_type'] is None):
            raise ValueError("Missing the required parameter `to_type` when calling `find_info_by_to_using_get`")

        resource_path = '/api/relations/info'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'relation_type_group' in params:
            query_params['relationTypeGroup'] = params['relation_type_group']
        if 'to_id' in params:
            query_params['toId'] = params['to_id']
        if 'to_type' in params:
            query_params['toType'] = params['to_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[EntityRelationInfo]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_relation_using_get(self, from_id, from_type, relation_type, to_id, to_type, **kwargs):
        """
        getRelation
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_using_get(from_id, from_type, relation_type, to_id, to_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_id: fromId (required)
        :param str from_type: fromType (required)
        :param str relation_type: relationType (required)
        :param str to_id: toId (required)
        :param str to_type: toType (required)
        :param str relation_type_group: relationTypeGroup
        :return: EntityRelation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_relation_using_get_with_http_info(from_id, from_type, relation_type, to_id, to_type, **kwargs)
        else:
            (data) = self.get_relation_using_get_with_http_info(from_id, from_type, relation_type, to_id, to_type, **kwargs)
            return data

    def get_relation_using_get_with_http_info(self, from_id, from_type, relation_type, to_id, to_type, **kwargs):
        """
        getRelation
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_using_get_with_http_info(from_id, from_type, relation_type, to_id, to_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_id: fromId (required)
        :param str from_type: fromType (required)
        :param str relation_type: relationType (required)
        :param str to_id: toId (required)
        :param str to_type: toType (required)
        :param str relation_type_group: relationTypeGroup
        :return: EntityRelation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_id', 'from_type', 'relation_type', 'to_id', 'to_type', 'relation_type_group']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relation_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_id' is set
        if ('from_id' not in params) or (params['from_id'] is None):
            raise ValueError("Missing the required parameter `from_id` when calling `get_relation_using_get`")
        # verify the required parameter 'from_type' is set
        if ('from_type' not in params) or (params['from_type'] is None):
            raise ValueError("Missing the required parameter `from_type` when calling `get_relation_using_get`")
        # verify the required parameter 'relation_type' is set
        if ('relation_type' not in params) or (params['relation_type'] is None):
            raise ValueError("Missing the required parameter `relation_type` when calling `get_relation_using_get`")
        # verify the required parameter 'to_id' is set
        if ('to_id' not in params) or (params['to_id'] is None):
            raise ValueError("Missing the required parameter `to_id` when calling `get_relation_using_get`")
        # verify the required parameter 'to_type' is set
        if ('to_type' not in params) or (params['to_type'] is None):
            raise ValueError("Missing the required parameter `to_type` when calling `get_relation_using_get`")

        resource_path = '/api/relation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'relation_type_group' in params:
            query_params['relationTypeGroup'] = params['relation_type_group']
        if 'from_id' in params:
            query_params['fromId'] = params['from_id']
        if 'from_type' in params:
            query_params['fromType'] = params['from_type']
        if 'relation_type' in params:
            query_params['relationType'] = params['relation_type']
        if 'to_id' in params:
            query_params['toId'] = params['to_id']
        if 'to_type' in params:
            query_params['toType'] = params['to_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EntityRelation',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def save_relation_using_post(self, relation, **kwargs):
        """
        saveRelation
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_relation_using_post(relation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EntityRelation relation: relation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.save_relation_using_post_with_http_info(relation, **kwargs)
        else:
            (data) = self.save_relation_using_post_with_http_info(relation, **kwargs)
            return data

    def save_relation_using_post_with_http_info(self, relation, **kwargs):
        """
        saveRelation
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_relation_using_post_with_http_info(relation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EntityRelation relation: relation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['relation']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_relation_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'relation' is set
        if ('relation' not in params) or (params['relation'] is None):
            raise ValueError("Missing the required parameter `relation` when calling `save_relation_using_post`")

        resource_path = '/api/relation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'relation' in params:
            body_params = params['relation']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
